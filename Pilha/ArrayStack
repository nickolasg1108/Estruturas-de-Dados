// Aula 01 -> 18/08/2025
public class ArrayStack implements Stackable {
  private Object[] data; 
  private int pointerTop;

  
  public ArrayStack(){
    this(10);
}

  public ArrayStack(int length) {
    data = new Object[length];
    pointerTop = -1; 
  }


  public boolean isEmpty() {
    return (pointerTop == -1);
  }

 
  public boolean isFull() {
    return (pointerTop == data.length - 1);
  }


  // Aula 02 -> 25/08/2025


  @Override
  public void push (Object data) {
    if (!isFull()) {
      pointerTop++;
      this.data[pointerTop] = data;
    }
    else {
      System.err.println("Stack is full");
    }
  }


  @Override
  public Object peek () {
    if (isEmpty()) {
      System.out.println ("Stack is empty");
    }
    else {
      return data[pointerTop];
    }
    return null;
  }

  @Override
  public Object pop () {
    Object temp = null;
    if (isEmpty()) {
      System.out.println("Stack is empty");
    }
    else {
      temp = data[pointerTop];
      pointerTop--;
    }
    return temp;
  }
  
  @Override
  public String print() {
		String resultado = "[";
		for(int i = pointerTop; i >= 0; i++) {
			if (i == 0) {
				resultado += data[i];
			}
			else {
				resultado += data[i] + ",";
			}
		}
		return resultado + "]";
	}


}